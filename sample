RSuite.action.defineAction(
		"Used",
		'<fmt:message key="tool.group.other"/>',
		{label:'<fmt:message key="tool.tip.used"/>',
		icon:'${contextPath}/images/icon_where_used.gif',
		action:function(moData) {
			var div = jQuery('<div class="whereused loading"></div>');
			div.modal({title:"<fmt:message key="tool.tip.used"/> (<fmt:message key="label.id"/>: "+moData.refId+")",width:"50%"});
			RSuite.engine.whereUsed(moData.refId,{
				rootElement: "refs",
				onSuccess: function(data) {
					var treeDiv = jQuery('<div class="tree"></div>').click(function(event) {
						var target = jQuery(event.target);
						if(target.is(".toggle")) {
							var li = target.parents("li:first");
							li.toggleClass("closed");
						}
					});
					var tree = jQuery('<ul></ul>').appendTo(treeDiv);
					var reuses = data.attr("refCount") || 0;
					var countDiv = jQuery('<div class="instruction">'+moData.name+' is reused '+reuses+' time'+ ((reuses == 1) ? '' : 's')+'</div>');
					//create function to recursively draw tree
					var drawNodes = function(nodeChildren,parentLevel) {
						jQuery.each(nodeChildren,function() {
							var node = jQuery(this);
							var children = node.children("node");
							var nodeName = node.attr("label") || "unknown";
							var browseUri = node.attr("browseUri");
							var refId = node.attr("refId");
							var nodeId = node.attr("id");
							var nodeType = node.attr("type") || "mo";
							var nodeExt = node.attr("ext");
							var li = jQuery('<li uri="'+browseUri+'" nid="'+nodeId+'" name="'+nodeName+'" ntype="'+nodeType+'"></li>').appendTo(parentLevel);
							var div = jQuery('<div class="node"></div>').addClass(nodeType).appendTo(li);
							if(nodeExt) div.addClass(nodeExt);
							div.append('<span class="toggle">&nbsp;</span>');
							div.append('<span class="icon"><span class="icon-status"></span></span>');
							var nodeLabel = (nodeType == "folder") ? nodeName : nodeName + " (ID: "+(refId || nodeId)+")";
							div.append('<span class="label">'+nodeLabel+'</span>');
							if(children.length) {
								var ul = jQuery('<ul></ul>').appendTo(li);
								drawNodes(children,ul);
							} else {
								div.find(".toggle").removeClass("toggle").addClass("leaf");
							}
						});
					}
					drawNodes(data.children("node"),tree);
					tree.find("LI:last-child").addClass("last");
					tree.find("UL:empty").remove();
					countDiv.appendTo(div.removeClass("loading"));
					//don't let it be higher than the screen, add a scrollbar if needed
					var maxH = jQuery("body").height() - 25;
					var origH = div.height();
					treeDiv.appendTo(div);
					//have to calc the div height after it is appended to the DOM
					var treeH = treeDiv.height();
					if(origH + treeH > maxH) {
						treeDiv.css({
							'height': (maxH-origH-85),
							'overflow': 'auto'
						});
					}
					RSuite.control.Modal.instance.center("both");
				}
			})
		},
		targetCheck: function(moData) {
			if(!moData || !moData.refUri) {
				return '<fmt:message key="tool.require.used"/>';
			}
		}}
);
